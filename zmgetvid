#!/usr/bin/perl

# ==========================================================================
#
# A script to fetch video from ZoneMinder for a series of events.
#
# Copyright 2020, Neill Bell
#
# ==========================================================================

use strict;
use warnings;
use Data::Dumper;
use Log::Any qw($log);
use Log::Any::Adapter;
use JSON;
use WWW::Mechanize;
use Getopt::Long;
use HTTP::Status qw(status_message);
use DateTime::Format::Natural;
use DateTime::Format::Strptime;
use LWP::Simple qw/ getstore is_error /;
use File::Temp qw/ tempfile tempdir /;

# Log levels
my %logLevel;
$logLevel{$_} = 1 for qw(
  debug
  info 
  notice
  warning
  error
  );

my $logLevel = 'error';
my $savetmp;
my $zmapi = $ENV{ZMAPI};
my $zmuser = $ENV{ZMUSER};
my $zmpass = $ENV{ZMPASS};
my @monitorKeys;
my $fromTime;
my $toTime;
my $search;
my $speed;
my $outputFile;
my $monitorsById;
my $monitorsByName;
my $outfps = "";
my $transpose;
my @events;

my %transpositions = (
  0 => 1,  # 90CounterCLockwise and Vertical Flip
  1 => 1,  # 90Clockwise
  2 => 1,  # 90CounterClockwise
  3 => 1   # 90Clockwise and Vertical Flip
);

usage() unless @ARGV;
  
Getopt::Long::Configure();

GetOptions("log=s" => \$logLevel,
           "savetmp" => \$savetmp,
           "zmapi=s" => \$zmapi,
           "zmuser=s"  => \$zmuser,
           "zmpass=s"  => \$zmpass,
           "from=s"  => \$fromTime,
           "search=s" => \$search,
           "to=s"  => \$toTime,
           "monitor=s"  => \@monitorKeys,
           "speed=f" => \$speed,
           "output=s" => \$outputFile,
           "outfps=f" => \$outfps,
           "transpose=i" => \$transpose,
           "help" => sub { usage() }
           ) or usage();

Log::Any::Adapter->set('Screen',
                       min_level => $logLevel,
                       stderr    => 1
  );

die "log must be one of " . join(", ", keys %logLevel) . "\n" if !$logLevel{$logLevel};
die "ZM API address not specifified\n" unless $zmapi;
die "ZM user not specified\n" unless $zmuser;
die "ZM password not specified\n" unless $zmpass;
die "start time not specified\n" if !defined $fromTime;
die "transpose must be one of " . join(", ", keys %transpositions)
  if defined $transpose and !defined $transpositions{$transpose};

$toTime = "now" if !defined $toTime;

my $agent = WWW::Mechanize->new(autocheck => 0);

# Log into Zoneminder.
my $response = $agent->post("$zmapi/host/login.json",
                            [user => $zmuser,
                             pass => $zmpass]);

$log->debug("LOGIN: " . Dumper($response));

if (!$agent->success())
{
  my $status = status_message($agent->status());
  
  die "login failed: $status\n";
}

# Retrieve the access token from the response, if present, and use it
# to make a parameter to append to web requests.
my $accessToken = decode_json($response->content)->{access_token};

# Get a list of all the monitors
getMonitors();

# Get a list of events as specified by the command line parameters
getEvents();

my $zm = $zmapi =~ s/\/api//r;

# Collect the input video in a temporary directory that will be deleted
# at exit.
my $tmpdir = tempdir(CLEANUP => $savetmp ? 0 : 1);

# Video is input to ffmpeg using a file containing a list of video file names.
my $fileListName = $tmpdir . "/filelist$$.txt";

open(my $fh, '>', $fileListName) or die "can't open $fileListName\n";

for my $event (@events)
{
  my $mid = $event->{MonitorId};
  my $eid = $event->{Id};
  my $monitor = $monitorsById->{$mid};
  my $monName = $monitor->{Name};
  my $from = $event->{StartDateTime};

  # If the user didn't specify an output file name, then make one up
  if (!defined $outputFile)
  {
    $outputFile = "$from" . "_$eid" . "_$monName.mp4";
    $outputFile =~ s/\s+/_/g;    
  }

  # Print the details about the event we found.
  printf "%-15s%-8s%19s: %s\n", $monName, $eid, $from, $event->{Notes};

  # Create an URL to fetch the video for the event
  my $url = $zm . "/index.php?view=view_video&eid=$eid" . ($accessToken ? "&token=$accessToken" : "");

  $log->info($url);

  # Specify the file name for this video  
  my $filename = $from . "_" . $eid . "_" . $monName . ".mp4";
  $filename =~ s/\s+/_/g;

  $log->debug("filename: $tmpdir/$filename\n");

  # Fetch the video
  my $code = getstore($url, $tmpdir . "/" . $filename);

  die "error: code = $code\n" if is_error($code);

  # Write the video file name into the file list file.
  print $fh "file '$tmpdir/$filename'\n";  
}

close($fh) or warn "close failed: $!";

print "found " . @events . " event" . (@events == 1 ? "" : "s") . "\n" if @events > 0;

# Bail if we found no events
exit if !@events;

# Sometimes the last file doesn't get written. Sleep?
select(undef, undef, undef, 0.25);

# If there is a speed multiplier, add a filter to do that. Otherwise,
# use the 'copy' command.
my $option;

if (defined $speed or defined $transpose)
{
  my @mods;
  
  if (defined $speed)
  {
    my $ratio = 1/$speed;
    push(@mods, "setpts=$ratio*PTS");
  }

  if (defined $transpose)
  {
    push(@mods, "transpose=$transpose");    
  }

  $option = "-filter:v \"" . join(",", @mods) . "\"";
}
else
{
  $option = "-c copy";
}

# Specify the output frame rate
$outfps = "-r $outfps" if $outfps ne "";

# Use ffmpeg to concatenate the videos
my $cmd = "ffmpeg -y -hide_banner -loglevel info -f concat -safe 0 -i $fileListName $option $outfps -an $outputFile";

$log->info("executing: $cmd");

system($cmd);


# Query the API for a list of monitors and create a data structure
# for each monitor.
#
# Also create global hashes that can be used to look up monitors
# by ID or name.
sub getMonitors
{
  $monitorsById = {};
  $monitorsByName = {};

  my $monResult = getJson($agent, $zmapi . "/monitors.json" . ($accessToken ? "?token=$accessToken" : ""));

  foreach my $mon (@{$monResult->{monitors}})
  {
    my $monitor = $mon->{Monitor};
    my $mid = $monitor->{Id};
    my $mName = $monitor->{Name};

    $monitorsById->{$mid} = $monitor;
    $monitorsByName->{$mName} = $monitor;
  }
}

# Translate a key (either a numerical ID or a name) into a monitor ID
sub getMonitorIdByKey
{
  my ($key) = @_;

  die "monitor not specified\n" if !defined $key;

  my $monitor = $monitorsById->{$key};

  $monitor = $monitorsByName->{$key} if !$monitor;

  die "monitor $key is not present\n" if !$monitor;

  return $monitor->{Id};
}

# Requests an URL and converts the JSON response to a Perl data structure
sub getJson
{
  my ($agent, $uri) = @_;
  my $result;

  my $response = $agent->get($uri);

  $log->debug("JSON GET: " . Dumper($response));

  if (!$agent->success())
  {
    my $status = status_message($agent->status());
    
    die "get JSON failed: $status\n";
  }
  
  my $jsonTxt = $agent->content();
  
  $result = decode_json($jsonTxt);

  return $result;
}

sub getEvents
{
  # Create a formatter that makes time strings that MySQL likes
  my $format = new DateTime::Format::Strptime(pattern => "%Y-%m-%d %H:%M:%S");

  # Initialize our natural language time parser
  my $parser = DateTime::Format::Natural->new(time_zone => 'local');

  # Parse the time to start looking for events and stop looking for events.
  my $from = $parser->parse_datetime($fromTime);
  my $to = $parser->parse_datetime($toTime);

  die "start time must be before end time\n" if (DateTime->compare($from, $to) == 1);
  
  # Build the JSON URL to send to ZoneMinder
  my $url = $zmapi . "/events/index";

  $url .= "/StartDateTime>=:" . $format->format_datetime($from);
  $url .= "/StartDateTime<=:" . $format->format_datetime($to);

  if (@monitorKeys)
  {
    my %exclude;
    
    foreach my $monitorKey (@monitorKeys)
    {
      if ($monitorKey =~ /^!/)
      {
        $monitorKey =~ s/^!//;
        
        $exclude{$monitorKey} = 1;
      }
    }

    if (keys %exclude)
    {
      foreach my $mid (keys %$monitorsById)
      {
        my $monitor = $monitorsById->{$mid};
        my $mid = $monitor->{Id};
        
        $url .= "/MonitorId:$mid" unless
          $exclude{$mid} or
          $exclude{$monitor->{Name}} or
          !$monitor->{Enabled} or
          $monitor->{Function} eq "None";
      }
    }
    else
    {
      for my $monitorKey (@monitorKeys)
      {
        my $mid = getMonitorIdByKey($monitorKey);
      
        $url .= "/MonitorId:$mid";
      }
    }
  }

  if ($search)
  {
    my $invert =  0;
    if ($search =~ /^!/)
    {
      $invert = 1;
      $search =~ s/^!//;
    }

    if ($invert)
    {
      $url .= "/Notes NOT REGEXP:$search" if $search;
    }
    else
    {
      $url .= "/Notes REGEXP:$search" if $search;
    }
  }

  #print "url = $url\n";
  
  $url .= ".json?&sort=StartDateTime&direction=asc";

  my $fullUrl = $url . "&page=1";

  $log->info($fullUrl);
  
  my $result = getJson($agent, $fullUrl . ($accessToken ? "&token=$accessToken" : ""));

  my $pageCount = $result->{pagination}->{pageCount};

  handlePage($result->{events});

  for (my $i = 2; $i <= $pageCount; $i++)
  {
    $fullUrl = $url . "&page=$i";
    
    $log->info($fullUrl);
  
    $result = getJson($agent, $fullUrl . ($accessToken ? "&token=$accessToken" : ""));

    handlePage($result->{events});
  }
}

sub handlePage
{
  my ($evArr) = @_;

  for my $ev (@$evArr)
  {
    push(@events, $ev->{Event});
  }
}

#
# Print usage and exit
#
sub usage
{
  print STDERR <<EOF;
  
  Fetch video from ZoneMinder for a series of events.
        
    usage: zmgetvid [option]

    options:
      --log=STRING       Set the log level (debug, info, notice, warning, error)
      --help             Print this text
      --from=TIME        The time to start looking for events
      --to=TIME          The time to stop looking for events (defaults to now)
      --monitor=MID      The monitor to use (name or ID) (can use multiple times)
                         (start with ! to exclude)
      --outfps=FLOAT     Optionally specify the frame rate of the output video file.
      --output=filename  Optionally specify the name of the output video file.
      --search=STRING    Only include events that match the search term in 
                         Notes (start with ! to invert).
      --speed=FLOAT      A speed multiplier. Will re-encode instead of copy.
      --savetmp          Save temporary files.
      --transpose=INT    Transpose the output video:
                           0: 90CounterClockwise and Vertical Flip
                           1: 90Clockwise
                           2: 90CounterClockwise
                           3: 90Clockwise and Vertical Flip
      --zmapi=API        The ZoneMinder API address (env var ZMAPI)
      --zmpass=PASSWORD  The ZoneMinder password (env var ZMPASS)
      --zmuser=USERNAME  The ZoneMinder user name  (env var ZMUSER)
    
EOF
  exit;
}
