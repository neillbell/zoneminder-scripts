#!/usr/bin/perl

# ==========================================================================
#
# A script to provide basic command line access to the Zoneminder API. See
# the usage function at the bottom for usage instructions.
#
# The parameters that can be set are limited to those listed in %monitorSetParams
# and %zoneSetParams. New parameters can easily be added by editing these
# lists. Editing %allowedValues can be useful for checking that the correct
# values are used for parameters that take text values.
#
# Parameter names are the names of the parameters specified in the API,
# with one exception. The pseudo-parameter 'Zones' can be used when querying
# monitors. It returns a list of all zones for the monitor.
#
# Copyright 2020, Neill Bell
#
# ==========================================================================

use strict;
use warnings;
use Data::Dumper;
use Log::Any qw($log);
use Log::Any::Adapter;
use JSON;
use WWW::Mechanize;
use Getopt::Long;
use HTTP::Status qw(status_message);
use Math::Polygon;
use Math::Round;

# Parameters that are allowed to be read from monitors
my %monitorGetParams;
$monitorGetParams{$_} = 1 for qw(
  AlarmFrameCount
  AlarmMaxFPS
  AlarmRefBlendPerc
  AnalysisFPSLimit
  AnalysisUpdateDelay
  ArchivedEventDiskSpace
  ArchivedEvents
  AutoStopTimeout
  Brightness
  Channel
  Colour
  Colours
  Contrast
  ControlAddress
  ControlDevice
  ControlId
  Controllable
  DayEventDiskSpace
  DayEvents
  DefaultRate
  DefaultScale
  Deinterlacing
  Device
  Enabled
  EncoderParameters
  EventPrefix
  Exif
  FPSReportInterval
  Format
  FrameSkip
  Function
  Height
  Host
  HourEventDiskSpace
  HourEvents
  Hue
  Id
  ImageBufferCount
  LabelFormat
  LabelSize
  LabelX
  LabelY
  LinkedMonitors
  MaxFPS
  Method
  MonthEventDiskSpace
  MonthEvents
  MotionFrameSkip
  Name
  Options
  Orientation
  OutputCodec
  OutputContainer
  Palette
  Pass
  Path
  Port
  PostEventCount
  PreEventCount
  Protocol
  RTSPDescribe
  RecordAudio
  RefBlendPerc
  Refresh
  ReturnDelay
  ReturnLocation
  SaveJPEGs
  SectionLength
  Sequence
  ServerId
  SignalCheckColour
  SignalCheckPoints
  StorageId
  StreamReplayBuffer
  Status
  SubPath
  TotalEventDiskSpace
  TotalEvents
  TrackDelay
  TrackMotion
  Triggers
  Type
  User
  V4LCapturesPerFrame
  V4LMultiBuffer
  VideoWriter
  WarmupCount
  WebColour
  WeekEventDiskSpace
  WeekEvents
  Width
  ZoneCount
  );

# Parameters that are allowed to be read from zones
my %zoneGetParams;
$zoneGetParams{$_} = 1 for qw(
  AlarmRGB
  Area
  CheckMethod
  Coords
  ExtendAlarmFrames
  FilterX
  FilterY
  Id
  MaxAlarmPixels
  MaxBlobPixels
  MaxBlobs
  MaxFilterPixels
  MaxPixelThreshold
  MinAlarmPixels
  MinBlobPixels
  MinBlobs
  MinFilterPixels
  MinPixelThreshold
  MonitorId
  Name
  NumCoords
  OverloadFrames
  Type
  Units
  );

# Parameters that are allowed to be written to monitors
my %monitorSetParams;
$monitorSetParams{$_} = 1 for qw(
  AlarmFrameCount
  Enabled
  EncoderParameters
  Function
  ImageBufferCount
  Name
  Orientation
);  

# Parameters that are allowed to be written to zones
my %zoneSetParams;
$zoneSetParams{$_} = 1 for qw(
  Area
  CheckMethod
  Coords
  ExtendAlarmFrames
  FilterX
  FilterY
  MaxAlarmPixels
  MaxBlobs
  MaxBlobPixels
  MaxFilterPixels
  MaxPixelThreshold
  MinAlarmPixels
  MinBlobs
  MinBlobPixels
  MinFilterPixels
  MinPixelThreshold
  Name
  OverloadFrames
  Type
  Units
);

# Zone parameters that are written and read as percentages
my %zonePercentParams;
$zonePercentParams{$_} = 1 for qw(
  MaxAlarmPixels
  MaxFilterPixels
  MaxBlobPixels
  MinAlarmPixels
  MinFilterPixels
  MinBlobPixels
  );

# The allowed values for parameters that require a text value
my %allowedValues;
$allowedValues{Function}{$_} = 1 for qw(
  None
  Monitor 
  Modect 
  Record 
  Mocord
  Nodect
  );
$allowedValues{Type}{$_} = 1 for qw(
  Active
  Inclusive
  Exclusive
  Preclusive
  Inactive
  Privacy
  );
$allowedValues{CheckMethod}{$_} = 1 for qw(
  AlarmedPixels
  FilteredPixels
  Blobs"
  );
$allowedValues{Orientation}{$_} = 1 for qw(
  ROTATE_0
  ROTATE_90
  ROTATE_180
  ROTATE_270
  FLIP_HORI
  FLIP_VERT
  );
$allowedValues{Units}{$_} = 1 for qw(
  Percent
  Pixels
  );

# Translation from the alarm state value to text
my %alarmState = (
  '' => "UNKNOWN",
  0 => "IDLE",
  1 => "PREALARM",
  2 => "ALARM",
  3 => "ALERT",
  4 => "TAPE"
  );

# Log levels
my %logLevel;
$logLevel{$_} = 1 for qw(
  debug
  info 
  notice
  warning
  error
  );

my $logLevel = 'error';
my $zmapi = $ENV{ZMAPI};
my $zmuser = $ENV{ZMUSER};
my $zmpass = $ENV{ZMPASS};
my $monitorsById;
my $monitorsByName;

usage() unless @ARGV;

GetOptions("log=s" => \$logLevel,
           "zmapi=s" => \$zmapi,
           "zmuser=s"  => \$zmuser,
           "zmpass=s"  => \$zmpass,
           "help" => sub { usage() }
           ) or usage();

Log::Any::Adapter->set('Screen',
                       min_level => $logLevel,
                       stderr    => 1
  );

die "zmapi address not specifified\n" unless $zmapi;
die "zmuser not specified\n" unless $zmuser;
die "zmpass not specified\n" unless $zmpass;
die "log must be one of " . join(", ", keys %logLevel) . "\n" if !$logLevel{$logLevel};

# Create the web agent
my $agent = WWW::Mechanize->new(autocheck => 0);

# Log into Zoneminder.
my $response = $agent->post("$zmapi/host/login.json",
                            [user => $zmuser,
                             pass => $zmpass]);

$log->debug("LOGIN: " . Dumper($response));

if (!$agent->success())
{
  my $status = status_message($agent->status());
  
  die "login failed: $status\n";
}

# Retrieve the access token from the response, if present, and use it
# to make a parameter to append to web requests.
my $accessToken = decode_json($response->content)->{access_token};

# Get a list of all the monitors
getMonitors();

my $cmd = shift @ARGV;

usage() if !defined $cmd;

# Process the command to list all the monitors
if ($cmd eq "list")
{
  print "Monitor Name     ID    Function    Enabled   Status\n";
  
  foreach my $monitor (sort { lc($a->{Name}) cmp lc($b->{Name}) } values %$monitorsByName)
  {
    my $status = $monitor->{Status};

    $status = "Unknown" if !defined $status;

    printf "%-15s %3d    %-8s    %1s         %s\n",
      $monitor->{Name},
      $monitor->{Id},
      $monitor->{Function},
      $monitor->{Enabled} eq 1 ? "T" : "F",
      $status;
  }
}

# Process the command to get a parameter. If no monitor is specified,
# list all the parameters for all the monitors.
elsif ($cmd eq "get")
{
  my $key = shift @ARGV;

  if (defined $key)
  {
    my $mid = getMonitorIdByKey($key);

    getMonitorParams($mid, @ARGV);
  }
  else
  {
    foreach my $monitor (sort { lc($a->{Name}) cmp lc($b->{Name}) } values %$monitorsByName)
    {
      getMonitorParams($monitor->{Id});
    }
  }
}

# Process the command to set a parameter
elsif ($cmd eq "set")
{
  my $key = shift @ARGV;

  my $mid = getMonitorIdByKey($key);

  setMonitorParam($mid, @ARGV);
}

# Process the command to get a monitor alarm state. If no monitor is specified,
# then print the alarm state of all monitors.
elsif ($cmd eq "getalarm")
{
  my $key = shift @ARGV;

  if (! defined $key)
  {
    foreach my $monitor (sort { lc($a->{Name}) cmp lc($b->{Name}) } values %$monitorsByName)
    {
      my $result = getMonitorAlarm($monitor->{Id});
      
      printf "%-15s %s\n",
        $monitor->{Name},
        $alarmState{$result->{status}};
    }
  }
  else
  {
    my $mid = getMonitorIdByKey($key);

    my $result = getMonitorAlarm($mid);

    print "  Alarm State: " . $alarmState{$result->{status}} . "\n";
  }
}

# Process the command to set a monitor alarm state
elsif ($cmd eq "setalarm")
{
  my $key = shift @ARGV;

  my $mid = getMonitorIdByKey($key);

  my $state = shift @ARGV;
  
  die "no alarm state specified\n" if !defined $state;

  $state = lc $state;

  die "unknown alarm state: $state\n" unless $state eq "on" or $state eq "off";

  setMonitorAlarm($mid, $state);
}

# Process the command to get a monitor's status. If no monitor is specified,
# print the status of all the monitors.
elsif ($cmd eq "getstatus")
{
  my $key = shift @ARGV;

  if (! defined $key)
  {
    foreach my $monitor (sort { lc($a->{Name}) cmp lc($b->{Name}) } values %$monitorsByName)
    {
      my $status = $monitor->{Status};

      $status = "Unknown" if !defined $status;

      printf "%-15s: %s\n",
        $monitor->{Name},
        $status;
    }
  }

  else
  {
    my $mid = getMonitorIdByKey($key);

    my $status = $monitorsById->{$mid}->{Status};

    $status = "Unknown" if !defined $status;
  
    print "  Status: $status\n";
  }
}

else
{
  die "command $cmd unknown\n";
}

# Get the alarm state for a monitor
sub getMonitorAlarm
{
  my ($mid) = @_;
  my $monitor;

  $log->info("getMonitorAlarm($mid)");
  
  $monitor = $monitorsById->{$mid};

  die "monitor $mid is not present\n" if !$monitor;

  my $result = getJson($agent, $zmapi . "/monitors/alarm/id:$mid/command:status.json");

  return $result;
}

# Set the alarm state for a monitor
sub setMonitorAlarm
{
  my ($mid, $state) = @_;
  my $monitor;

  $log->info("setMonitorAlarm($mid, $state)");
  
  $monitor = $monitorsById->{$mid};

  die "monitor $mid is not present\n" if !$monitor;

  die "monitor $mid is not connected\n" unless $monitor->{Status} eq "Connected";

  my $function = $monitor->{Function};
  
  die "can't set alarm for monitor with function: $monitor->{Function}\n" unless $function eq "Modect" or $function eq "Mocord" or $function eq "Nodect";
  
  my $result = getJson($agent, $zmapi . "/monitors/alarm/id:$mid/command:$state.json");

  return $result;
}

# Set a monitor parameter or a zone parameter for that monitor
#
# mid:  monitor ID
# argv: a list of one or more monitor parameters to set. The form of each
#       parameter is ParamName:Value. If the first parameter is not a
#       monitor parameter, then use it as a zone ID and the following
#       parameters as zone parameters to set.
#
sub setMonitorParam
{
  my ($mid, @argv) = @_;
  my $monitor;

  $log->info("setMonitorParam($mid, @argv)");
  
  $monitor = $monitorsById->{$mid};

  die "monitor $mid is not present\n" if !$monitor;

  if (defined $argv[0] && !$monitorSetParams{$argv[0]})
  {
    my $zid = getZoneIdByKey($mid, $argv[0]);
    
    if ($zid)
    {
      shift @argv;
      
      setZoneParam($mid, $zid, @argv);
      
      return;
    }
  }
  
  for my $arg (@argv)
  {
    my ($param, $value) = split(":", $arg);

    die "$param not found for monitors\n" if !$monitorSetParams{$param};

    die "cannot set blank value for $param\n" if !$value || ($value eq "");

    die "$value is not an allowed value for $param\n" if ($allowedValues{$param} &&
                                                          !$allowedValues{$param}->{$value});
  
    postSetMonitorParam($mid, $param, $value);
  }
}

# Do a post operation to set a monitor parameter
sub postSetMonitorParam
{
  my ($mid, $param, $value) = @_;

  $log->info("postSetMonitorParam($mid, $param, $value)");
  
  my $url = $zmapi . "/monitors/$mid.json" . ($accessToken ? "?token=$accessToken" : "");

  $log->info("post: $url");
  $log->info("      [Monitor[$param]: $value]");
  
  my $response = $agent->post($url, ["Monitor[$param]" => $value]);  

  $log->debug("MONITOR POST: " . Dumper($response));

  if (!$agent->success())
  {
    my $status = status_message($agent->status());
    
    die "set monitor parameter failed: $status\n";
  }
}

# Set a zone parameter
#
# mid:  monitor ID
# zid:  zone ID
# argv: a list of one or more zone parameters to set. The form of each
#       parameter is ParamName:Value.
#
sub setZoneParam
{
  my ($mid, $zid, @argv) = @_;
  my $monitor;
  my $zone;

  $log->info("setZoneParam($mid, $zid, @argv)");
  
  $monitor = $monitorsById->{$mid};

  die "monitor $mid is not present\n" if !$monitor;

  $zone = $monitor->{zonesById}->{$zid};

  die "zone $zid on monitor $mid ($monitor->{Name}) is not present\n" if !$zone;

  for my $arg (@argv)
  {
    my ($param, $value) = split(":", $arg);

    die "cannot set $param for zones\n" if !$zoneSetParams{$param};

    die "cannot set blank value for $param\n" if !defined $value or $value eq "";

    die "$value is not an allowed value for $param\n" if ($allowedValues{$param} &&
                                                          !$allowedValues{$param}->{$value});
  
    postSetZoneParam($zid, $param, convertZoneParam($zone, $param, $value));
  }
}

# Convert a zone parameter to its final value. It may need to be converted
# from the command line value to the form that the API expects. Also do
# some range checking.
sub convertZoneParam
{
  my ($zone, $param, $value) = @_;
  my $result = '';

  if ($zonePercentParams{$param} && ($zone->{Units} eq "Percent"))
  {
    my $area = $zone->{Area};

    die "cannot set more than 100% for $param\n" if $value > 100.0;

    $result = sprintf("%.0f", $area * $value / 100.0);
  }
  elsif ($zonePercentParams{$param} && ($zone->{Units} eq "Pixels"))
  {
    my $area = $zone->{Area};

    die "cannot set a pixel value greater than area of zone ($zone->{Name}: $value > $area)\n" if $value > $area;      

    $result = $value;
  }
  else
  {
    $result = $value;
  }

  return $result;
}

# Do a post operation to set a zone parameter
#
# zid:   zone ID
# param: the name of the zone parameter to set
# value: the value to apply to the zone parameter
#
sub postSetZoneParam
{
  my ($zid, $param, $value) = @_;
  
  $log->info("postSetZoneParam($zid, $param, $value)");
  
  my $url = $zmapi . "/zones/$zid.json" . ($accessToken ? "?token=$accessToken" : "");

  $log->info("post: $url");
  $log->info("      [Zone[$param]: $value]");
  
  my $response = $agent->post($url, ["Zone[$param]" => $value]);  

  $log->debug("ZONE POST: " . Dumper($response));

  if (!$agent->success())
  {
    my $status = status_message($agent->status());
    
    die "set zone parameter failed: $status\n";
  }
}

# Get a monitor parameter
#
# mid:  monitor ID
# args: a list of one or more monitor parameter names. If this list is
#       blank, then list all of the parameters for this monitor.
#
sub getMonitorParams
{
  my ($mid, @args) = @_;
  my $monitor;

  $log->info("getMonitorParams($mid, @args)");
  
  $monitor = $monitorsById->{$mid};

  die "monitor $mid is not present\n" if !$monitor;

  if (@args)
  {
    if (!$monitorGetParams{$args[0]} && ($args[0] ne "Zones"))
    {
      my $zid = getZoneIdByKey($mid, $args[0]);

      if ($zid)
      {
        shift @args;

        getZoneParams($mid, $zid, @args);

        return;
      }
      else
      {
        die "$args[0] not available for monitors\n" if !$monitorGetParams{$args[0]};
      }
    }
    
    for my $param (@args)
    {
      if ($param eq "Zones")
      {
        print "  Zones: " . getZoneList($monitor) . "\n";
      }
      else
      {
        die "$param not available for monitors\n" if !$monitorGetParams{$param};

        my $value = $monitor->{$param};

        print "  $param: $value\n" if $value;
      }
    }
  }
  else
  {
    print "Monitor $monitorsById->{$mid}->{Name} ($mid)\n";

    foreach my $param (sort { lc($a) cmp lc($b) } keys %monitorGetParams)
    {
      my $value = $monitor->{$param};

      print "  $param: $value\n" if $value;
    }

    print "  Zones: " . getZoneList($monitor) . "\n";
  }
}

# Get a zone parameter
#
# mid:  monitor ID
# zid:  zone ID
# args: a list of one or more zone parameter names. If this list is
#       blank, then list all of the parameters for this zone.
#
sub getZoneParams
{
  my ($mid, $zid, @args) = @_;
  my $monitor;
  my $zone;

  $log->info("getZoneParams($mid, $zid, @args)");

  $monitor = $monitorsById->{$mid};

  die "monitor $mid is not present\n" if !$monitor;

  $zone = $monitor->{zonesById}->{$zid};

  die "zone $zid on monitor $mid ($monitor->{Name}) is not present\n" if !$zone;

  if (@args)
  {
    for my $param (@args)
    {
      if ($param eq "RealArea")
      {
        print "  RealArea: ${\getZoneArea($zone)}\n";
      }
      else
      {
        die "$param not available for zones\n" if !$zoneGetParams{$param};

        my $value = formatZoneParam($zone, $param);

        print "  $param: $value\n" if defined $value;
      }
    }
  }

  else
  {
    print "Monitor $monitor->{Name} ($mid), Zone $zone->{Name} ($zid)\n";

    foreach my $param (sort { lc($a) cmp lc($b) } keys %zoneGetParams)
    {
      die "$param not available for zones\n" if !$zoneGetParams{$param};

      my $value = formatZoneParam($zone, $param);
      
      print "  $param: $value\n" if defined $value;
    }

    print "  RealArea: ${\getZoneArea($zone)}\n";
  }
}

# Get the area of a zone
#
# zone: a zone object
#
sub getZoneArea
{
  my ($zone) = @_;
  my @points;  

  # Get the zone coordinates
  my $polyStr = $zone->{Coords};

  # Break the coordinate string into a list of individual
  # point strings
  my @pointStrs = $polyStr =~ /(\d+,\d+)/g;

  # Assemble the points into a list of point references
  for my $pointStr (@pointStrs)
  {
    my ($x, $y) = split(',', $pointStr);

    push (@points, [$x, $y]);
  }

  # Close the polygon by reiterating the first point
  push(@points, $points[0]);

  # Create the polygon from the point list
  my $poly = Math::Polygon->new(points => \@points);

  # Make sure the polygon points are clockwise
  $poly = $poly->clockwise();

  return round($poly->area()) . " (" . getPolyString($poly) . ")";
}

# Get a string describing the points in a polygon
#
# poly: a polygon object
#
sub getPolyString
{
  my ($poly) = @_;
  my $str = "";

  for my $point (@{$poly->points()})
  {
    $str .= ($point->[0] . "," . $point->[1] . " ");
  }

  $str =~ s/\s+$//;

  return $str;
}

# Fetch a zone parameter while formatting it to a percentage, if necessary.
#
# zone:  the data structure for the zone to be modified
# param: the name of the zone parameter to fetch
#
sub formatZoneParam
{
  my ($zone, $param) = @_;
  my $result = '';

  # If this parameter should be expressed in percent and the zone
  # units are currently percent, then return the parameter as
  # a percentage of the total zone area.
  if ($zonePercentParams{$param} && ($zone->{Units} eq "Percent"))
  {
    my $area = $zone->{Area};
    my $value = $zone->{$param};

    return "" if !defined $value;
    
    $result = sprintf "%.4g%%", $value * 100.0 / $area;
  }
  else
  {
    $result = $zone->{$param};
  }

  return $result;
}

# Get a text listing of all the zones for a monitor
#
# monitor: the data structure for the monitor in question
#
sub getZoneList
{
  my ($monitor) = @_;
  
  my $zoneList = "";

  my $zones = $monitor->{zonesByName};
    
  foreach my $zName (sort { lc($a) cmp lc($b) } keys %$zones)
  {
    $zoneList .= "$zName ($zones->{$zName}->{Id}), ";
  }
  
  $zoneList =~ s/,\s*$//;

  return $zoneList;
}

# Query the API for a list of monitors and zones and create a data
# structure for each monitor and associated zones.
#
# Also create global hashes that can be used to look up monitors
# by ID or name.
#
sub getMonitors
{
  $monitorsById = {};
  $monitorsByName = {};

  my $monResult = getJson($agent, $zmapi . "/monitors.json");

  foreach my $mon (@{$monResult->{monitors}})
  {
    my $monitor = $mon->{Monitor};
    my $mid = $monitor->{Id};
    my $mName = $monitor->{Name};

    $monitorsById->{$mid} = $monitor;
    $monitorsByName->{$mName} = $monitor;

    $monitor->{Status} = $mon->{Monitor_Status}->{Status};

    $monitor->{Status} = "Unknown" if !defined $monitor->{Status};
    
    $monitor->{zonesById} = {};
    $monitor->{zonesByName} = {};
  }

  my $zoneResult = getJson($agent, $zmapi . "/zones.json");

  foreach my $zn (@{$zoneResult->{zones}})
  {
    my $zone = $zn->{Zone};

    my $mid = $zone->{MonitorId};
    my $zid = $zone->{Id};
    my $zName = $zone->{Name};
    my $monitor = $monitorsById->{$mid};

    $monitor->{zonesById}->{$zid} = $zone;
    $monitor->{zonesByName}->{$zName} = $zone;
  }
}

# Translate a key (either a numerical ID or a name) into a monitor ID
sub getMonitorIdByKey
{
  my ($key) = @_;

  die "monitor not specified\n" if !defined $key;

  my $monitor = $monitorsById->{$key};

  $monitor = $monitorsByName->{$key} if !$monitor;

  die "monitor $key is not present\n" if !$monitor;

  return $monitor->{Id};
}

# Translate a monitor ID and a key (either a numerical ID or a name) into a zone ID
#
# mid: monitor ID of the monitor that contains the zone
# key: an identifer for the zone, either the numerical ID or the name
#
sub getZoneIdByKey
{
  my ($mid, $key) = @_;

  die "monitor not specified\n" if !defined $mid;

  die "zone not specified\n" if !defined $key;

  my $monitor = $monitorsById->{$mid};

  my $zone = $monitor->{zonesById}->{$key};

  $zone = $monitor->{zonesByName}->{$key} if !$zone;

  return undef if !$zone;

  return $zone->{Id};
}

# Requests an URL and converts the JSON response to a Perl data structure
#
# agent: the WWW::Mechanize agent to use to make the request
# url:   the URL to request
#
sub getJson
{
  my ($agent, $url) = @_;
  my $result;
  
  $url = $url . ($accessToken ? "?token=$accessToken" : "");

  $log->info("get: $url");
  
  my $response = $agent->get($url);

  $log->debug("JSON GET: " . Dumper($response));

  if (!$agent->success())
  {
    my $status = status_message($agent->status());
    
    die "get JSON failed: $status\n";
  }
  
  my $jsonTxt = $agent->content();
  
  $result = decode_json($jsonTxt);

  return $result;
}

#
# Print usage and exit
#
sub usage
{
  print STDERR <<EOF;
  
  Interface to the Zoneminder API. Monitors and zones can be referenced either
  by name or numerical ID. All names are case sensitive.
    
    usage: zmctrl [option] cmd [monitor] [zone] [parameters..]

    cmd:
      get        Get a monitor/zone parameter
      set        Set a monitor/zone parameter
      getalarm   Get the alarm state of a monitor
      setalarm   Set the alarm state of a monitor
      getstatus  Get the status of a monitor
      list       Get a list of monitors

    parameters:
      get        [mon] [parm]            No monitor lists all monitors. No parm arg lists 
                                         all monitor parms.
      set        mon parm:value          Multiple parameters can be set at once.
      get        mon zone [parm]         No parm arg lists all zone parms.
      set        mon zone parm:value     Multiple parameters can be set at once.
      getalarm   [mon]                   No mon arg lists alarm status for all monitors.
      setalarm   mon on|off              Set the alarm state of a monitor
      
    options:
      --zmapi    The URL for the Zoneminder API. Of the form
                   https://example.org/zm/api (env var ZMAPI)
      --zmuser   The Zoneminder user name  (env var ZMUSER)
      --zmpass   The Zoneminder password (env var ZMPASS)
      --log      Set the log level (debug, info, notice, warning, error)

    notes:
      Zones is a monitor pseudo-parameter that will return a list of all zones
      for that monitor.
    
EOF
  exit;
}
